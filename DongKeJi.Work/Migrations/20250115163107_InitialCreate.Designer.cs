// <auto-generated />
using System;
using DongKeJi.Work.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DongKeJi.Work.Migrations
{
    [DbContext(typeof(WorkDbContext))]
    [Migration("20250115163107_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("DongKeJi.Entity.ConfigEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("JsonStringValue")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Json");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Key");

                    b.HasKey("Id");

                    b.ToTable("Config");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Consume.ConsumeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreateTime");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("TEXT")
                        .HasColumnName("StaffId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Consume");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Customer.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Area")
                        .HasColumnType("TEXT")
                        .HasColumnName("Area");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Order.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CustomerId");

                    b.Property<string>("Describe")
                        .HasColumnType("TEXT")
                        .HasColumnName("Describe");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<double>("Price")
                        .HasColumnType("REAL")
                        .HasColumnName("Price");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER")
                        .HasColumnName("State");

                    b.Property<DateTime>("SubscribeTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("SubscribeTime");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Staff.StaffEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Staff.StaffPositionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Describe")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("Describe");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("Title");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("LinkStaffCustomer", b =>
                {
                    b.Property<Guid>("CustomersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StaffsId")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomersId", "StaffsId");

                    b.HasIndex("StaffsId");

                    b.ToTable("LinkStaffCustomer");
                });

            modelBuilder.Entity("LinkStaffOrder", b =>
                {
                    b.Property<Guid>("OrdersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StaffsId")
                        .HasColumnType("TEXT");

                    b.HasKey("OrdersId", "StaffsId");

                    b.HasIndex("StaffsId");

                    b.ToTable("LinkStaffOrder");
                });

            modelBuilder.Entity("LinkStaffPosition", b =>
                {
                    b.Property<Guid>("PositionsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StaffsId")
                        .HasColumnType("TEXT");

                    b.HasKey("PositionsId", "StaffsId");

                    b.HasIndex("StaffsId");

                    b.ToTable("LinkStaffPosition");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Consume.ConsumeCountingEntity", b =>
                {
                    b.HasBaseType("DongKeJi.Work.Model.Entity.Consume.ConsumeEntity");

                    b.Property<double>("ConsumeCounts")
                        .HasColumnType("REAL")
                        .HasColumnName("consume_counts");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT")
                        .HasColumnName("OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ConsumeCounting");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Consume.ConsumeMixingEntity", b =>
                {
                    b.HasBaseType("DongKeJi.Work.Model.Entity.Consume.ConsumeEntity");

                    b.Property<double>("ConsumeCounts")
                        .HasColumnType("REAL")
                        .HasColumnName("ConsumeCounts");

                    b.Property<double>("ConsumeDays")
                        .HasColumnType("REAL")
                        .HasColumnName("ConsumeDays");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT")
                        .HasColumnName("OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ConsumeMixing");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Consume.ConsumeTimingEntity", b =>
                {
                    b.HasBaseType("DongKeJi.Work.Model.Entity.Consume.ConsumeEntity");

                    b.Property<double>("ConsumeDays")
                        .HasColumnType("REAL")
                        .HasColumnName("ConsumeDays");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT")
                        .HasColumnName("OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ConsumeTiming");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Order.OrderCountingEntity", b =>
                {
                    b.HasBaseType("DongKeJi.Work.Model.Entity.Order.OrderEntity");

                    b.Property<double>("InitCounts")
                        .HasColumnType("REAL")
                        .HasColumnName("InitCounts");

                    b.Property<double>("TotalCounts")
                        .HasColumnType("REAL")
                        .HasColumnName("TotalCounts");

                    b.ToTable("OrderCounting");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Order.OrderMixingEntity", b =>
                {
                    b.HasBaseType("DongKeJi.Work.Model.Entity.Order.OrderEntity");

                    b.Property<double>("InitCounts")
                        .HasColumnType("REAL")
                        .HasColumnName("InitCounts");

                    b.Property<double>("InitDays")
                        .HasColumnType("REAL")
                        .HasColumnName("InitDays");

                    b.Property<double>("TotalCounts")
                        .HasColumnType("REAL")
                        .HasColumnName("TotalCounts");

                    b.Property<double>("TotalDays")
                        .HasColumnType("REAL")
                        .HasColumnName("TotalDays");

                    b.ToTable("OrderMixing");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Order.OrderTimingEntity", b =>
                {
                    b.HasBaseType("DongKeJi.Work.Model.Entity.Order.OrderEntity");

                    b.Property<double>("InitDays")
                        .HasColumnType("REAL")
                        .HasColumnName("InitDays");

                    b.Property<double>("TotalDays")
                        .HasColumnType("REAL")
                        .HasColumnName("TotalDays");

                    b.ToTable("OrderTiming");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Consume.ConsumeEntity", b =>
                {
                    b.HasOne("DongKeJi.Work.Model.Entity.Staff.StaffEntity", "Staff")
                        .WithMany("Consumes")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Order.OrderEntity", b =>
                {
                    b.HasOne("DongKeJi.Work.Model.Entity.Customer.CustomerEntity", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LinkStaffCustomer", b =>
                {
                    b.HasOne("DongKeJi.Work.Model.Entity.Customer.CustomerEntity", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DongKeJi.Work.Model.Entity.Staff.StaffEntity", null)
                        .WithMany()
                        .HasForeignKey("StaffsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LinkStaffOrder", b =>
                {
                    b.HasOne("DongKeJi.Work.Model.Entity.Order.OrderEntity", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DongKeJi.Work.Model.Entity.Staff.StaffEntity", null)
                        .WithMany()
                        .HasForeignKey("StaffsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LinkStaffPosition", b =>
                {
                    b.HasOne("DongKeJi.Work.Model.Entity.Staff.StaffPositionEntity", null)
                        .WithMany()
                        .HasForeignKey("PositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DongKeJi.Work.Model.Entity.Staff.StaffEntity", null)
                        .WithMany()
                        .HasForeignKey("StaffsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Consume.ConsumeCountingEntity", b =>
                {
                    b.HasOne("DongKeJi.Work.Model.Entity.Consume.ConsumeEntity", null)
                        .WithOne()
                        .HasForeignKey("DongKeJi.Work.Model.Entity.Consume.ConsumeCountingEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DongKeJi.Work.Model.Entity.Order.OrderCountingEntity", "Order")
                        .WithMany("Consumes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Consume.ConsumeMixingEntity", b =>
                {
                    b.HasOne("DongKeJi.Work.Model.Entity.Consume.ConsumeEntity", null)
                        .WithOne()
                        .HasForeignKey("DongKeJi.Work.Model.Entity.Consume.ConsumeMixingEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DongKeJi.Work.Model.Entity.Order.OrderMixingEntity", "Order")
                        .WithMany("Consumes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Consume.ConsumeTimingEntity", b =>
                {
                    b.HasOne("DongKeJi.Work.Model.Entity.Consume.ConsumeEntity", null)
                        .WithOne()
                        .HasForeignKey("DongKeJi.Work.Model.Entity.Consume.ConsumeTimingEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DongKeJi.Work.Model.Entity.Order.OrderTimingEntity", "Order")
                        .WithMany("Consumes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Order.OrderCountingEntity", b =>
                {
                    b.HasOne("DongKeJi.Work.Model.Entity.Order.OrderEntity", null)
                        .WithOne()
                        .HasForeignKey("DongKeJi.Work.Model.Entity.Order.OrderCountingEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Order.OrderMixingEntity", b =>
                {
                    b.HasOne("DongKeJi.Work.Model.Entity.Order.OrderEntity", null)
                        .WithOne()
                        .HasForeignKey("DongKeJi.Work.Model.Entity.Order.OrderMixingEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Order.OrderTimingEntity", b =>
                {
                    b.HasOne("DongKeJi.Work.Model.Entity.Order.OrderEntity", null)
                        .WithOne()
                        .HasForeignKey("DongKeJi.Work.Model.Entity.Order.OrderTimingEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Customer.CustomerEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Staff.StaffEntity", b =>
                {
                    b.Navigation("Consumes");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Order.OrderCountingEntity", b =>
                {
                    b.Navigation("Consumes");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Order.OrderMixingEntity", b =>
                {
                    b.Navigation("Consumes");
                });

            modelBuilder.Entity("DongKeJi.Work.Model.Entity.Order.OrderTimingEntity", b =>
                {
                    b.Navigation("Consumes");
                });
#pragma warning restore 612, 618
        }
    }
}
